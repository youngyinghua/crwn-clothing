{"ast":null,"code":"import { takeLatest, call, put, all } from \"redux-saga/effects\";\nimport { auth, googleProvider, createUserProfileDocument } from \"../../firebase/firebase.utils\";\nimport { signInFailure, signInSuccess } from \"./user.action\";\nimport UserActionTypes from \"./user.types\";\nexport function* getSnapshotFromUserAuth(user) {\n  const userRef = yield call(createUserProfileDocument, user);\n  const userSnapshot = yield userRef.get();\n  yield put(signInSuccess({\n    id: userSnapshot.id,\n    ...userSnapshot.data()\n  }));\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const unsubscribeFormAuth = yield auth.onAuthStateChanged(userAuth => {\n      if (userAuth) {\n        getSnapshotFromUserAuth(userAuth);\n      }\n\n      unsubscribeFormAuth();\n    });\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)]);\n}","map":{"version":3,"sources":["/Users/wawa/Desktop/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","call","put","all","auth","googleProvider","createUserProfileDocument","signInFailure","signInSuccess","UserActionTypes","getSnapshotFromUserAuth","user","userRef","userSnapshot","get","id","data","signInWithGoogle","signInWithPopup","error","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","unsubscribeFormAuth","onAuthStateChanged","userAuth","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SACEC,IADF,EAEEC,cAFF,EAGEC,yBAHF,QAIO,+BAJP;AAKA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,eAA7C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,uBAAV,CAAkCC,IAAlC,EAAwC;AAC7C,QAAMC,OAAO,GAAG,MAAMX,IAAI,CAACK,yBAAD,EAA4BK,IAA5B,CAA1B;AACA,QAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,QAAMZ,GAAG,CACPM,aAAa,CAAC;AACZO,IAAAA,EAAE,EAAEF,YAAY,CAACE,EADL;AAEZ,OAAGF,YAAY,CAACG,IAAb;AAFS,GAAD,CADN,CAAT;AAMD;AAED,OAAO,UAAUC,gBAAV,GAA6B;AAClC,MAAI;AACF,UAAM;AAAEN,MAAAA;AAAF,QAAW,MAAMP,IAAI,CAACc,eAAL,CAAqBb,cAArB,CAAvB;AACA,UAAMK,uBAAuB,CAACC,IAAD,CAA7B;AACD,GAHD,CAGE,OAAOQ,KAAP,EAAc;AACd,UAAMjB,GAAG,CAACK,aAAa,CAACY,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUC,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AACjE,MAAI;AACF,UAAM;AAAEZ,MAAAA;AAAF,QAAW,MAAMP,IAAI,CAACoB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMb,uBAAuB,CAACC,IAAD,CAA7B;AACD,GAHD,CAGE,OAAOQ,KAAP,EAAc;AACd,UAAMjB,GAAG,CAACK,aAAa,CAACY,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUM,mBAAV,GAAgC;AACrC,MAAI;AACF,UAAMC,mBAAmB,GAAG,MAAMtB,IAAI,CAACuB,kBAAL,CAAyBC,QAAD,IAAc;AACtE,UAAIA,QAAJ,EAAc;AACZlB,QAAAA,uBAAuB,CAACkB,QAAD,CAAvB;AACD;;AACDF,MAAAA,mBAAmB;AACpB,KALiC,CAAlC;AAMD,GAPD,CAOE,OAAOP,KAAP,EAAc;AACd,UAAMjB,GAAG,CAACK,aAAa,CAACY,KAAD,CAAd,CAAT;AACD;AACF;AACD,OAAO,UAAUU,mBAAV,GAAgC;AACrC,QAAM7B,UAAU,CAACS,eAAe,CAACqB,oBAAjB,EAAuCb,gBAAvC,CAAhB;AACD;AAED,OAAO,UAAUc,kBAAV,GAA+B;AACpC,QAAM/B,UAAU,CAACS,eAAe,CAACuB,mBAAjB,EAAsCZ,eAAtC,CAAhB;AACD;AAED,OAAO,UAAUa,kBAAV,GAA+B;AACpC,QAAMjC,UAAU,CAACS,eAAe,CAACyB,kBAAjB,EAAqCT,mBAArC,CAAhB;AACD;AAED,OAAO,UAAUU,SAAV,GAAsB;AAC3B,QAAMhC,GAAG,CAAC,CACRF,IAAI,CAAC4B,mBAAD,CADI,EAER5B,IAAI,CAAC8B,kBAAD,CAFI,EAGR9B,IAAI,CAACgC,kBAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["import { takeLatest, call, put, all } from \"redux-saga/effects\";\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDocument,\n} from \"../../firebase/firebase.utils\";\nimport { signInFailure, signInSuccess } from \"./user.action\";\nimport UserActionTypes from \"./user.types\";\n\nexport function* getSnapshotFromUserAuth(user) {\n  const userRef = yield call(createUserProfileDocument, user);\n  const userSnapshot = yield userRef.get();\n  yield put(\n    signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data(),\n    })\n  );\n}\n\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* isUserAuthenticated() {\n  try {\n    const unsubscribeFormAuth = yield auth.onAuthStateChanged((userAuth) => {\n      if (userAuth) {\n        getSnapshotFromUserAuth(userAuth);\n      }\n      unsubscribeFormAuth();\n    });\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* userSagas() {\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSignInStart),\n    call(onCheckUserSession),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}