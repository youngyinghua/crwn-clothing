{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyCxuS31xQor5wUbO2G5oB7Nagqc9Rd0o2g\",\n  authDomain: \"crwn-db-928b7.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-928b7.firebaseio.com\",\n  projectId: \"crwn-db-928b7\",\n  storageBucket: \"crwn-db-928b7.appspot.com\",\n  messagingSenderId: \"252835979138\",\n  appId: \"1:252835979138:web:32745818a3e9fc8986b99b\",\n  measurementId: \"G-BVEVS6QFT2\"\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const getCollectionData = snapShot => {\n  let collections = {};\n  snapShot.forEach(doc => {\n    collections[doc.data().title.toLowerCase()] = { ...doc.data(),\n      routeName: encodeURI(doc.data().title.toLowerCase()),\n      id: doc.id\n    };\n  });\n  console.log(collections);\n  return collections;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/wawa/Desktop/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","createUserProfileDocument","userAuth","additionalData","userRef","doc","uid","snapShot","get","exists","displayName","email","createAt","Date","set","error","console","log","message","getCollectionData","collections","forEach","data","title","toLowerCase","routeName","encodeURI","id","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","obj","newDocRef","commit","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nconst config = {\n  apiKey: \"AIzaSyCxuS31xQor5wUbO2G5oB7Nagqc9Rd0o2g\",\n  authDomain: \"crwn-db-928b7.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-928b7.firebaseio.com\",\n  projectId: \"crwn-db-928b7\",\n  storageBucket: \"crwn-db-928b7.appspot.com\",\n  messagingSenderId: \"252835979138\",\n  appId: \"1:252835979138:web:32745818a3e9fc8986b99b\",\n  measurementId: \"G-BVEVS6QFT2\",\n};\n\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createAt = new Date();\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n  return userRef;\n};\n\nexport const getCollectionData = (snapShot) => {\n  let collections = {};\n  snapShot.forEach((doc) => {\n    collections[doc.data().title.toLowerCase()] = {\n      ...doc.data(),\n      routeName: encodeURI(doc.data().title.toLowerCase()),\n      id: doc.id,\n    };\n  });\n  console.log(collections);\n  return collections;\n};\n\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = firestore.collection(collectionKey);\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach((obj) => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}